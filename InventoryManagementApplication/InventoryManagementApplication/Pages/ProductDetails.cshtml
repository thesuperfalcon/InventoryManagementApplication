@page "{id:int}"
@model InventoryManagementApplication.Pages.ProductDetailsModel

<div class="container">
    <div class="row">
        <div class="col-md-7">
            <div class="card mb-4">
                <div class="card-header">
                    <h2>Produktdetaljer: @Model.Product.Name</h2>
                </div>
                <div class="card-body">
@* Bara admin kan göra ändringar *@
@if (User.IsInRole("Admin"))
{
<button class="btn btn-generic" data-bs-toggle="modal" data-bs-target="#editProductModal">
    <i class="bi bi-pencil"></i>
</button>

}
                    @if (Model.Product != null)
                    {
                        <table class="table">
                            <tr>
                                <th><strong>Namn</strong></th>
                                <td>@Model.Product.Name</td>
                            </tr>
                            <tr>
                                <th><strong>Artikelnummer</strong></th>
                                <td>@Model.Product.ArticleNumber</td>
                            </tr>
                            <tr>
                                <th><strong>Beskrivning</strong></th>
                                <td>@Model.Product.Description</td>
                            </tr>
                            <tr>
                                <th><strong>Totalantal</strong></th>
                                <td>@Model.Product.TotalStock</td>
                            </tr>
                            <tr>
                                <th><strong>Tillgängligt antal</strong></th>
                                <td>@Model.Product.CurrentStock</td>
                            </tr>
                            <tr>
                                <th><strong>Produkt skapad</strong></th>
                                <td>@Model.Product.Created</td>
                            </tr>
                            <tr>
                                <th><strong>Information uppdaterad</strong></th>
                                <td>@Model.Product.Updated</td>
                            </tr>
                        </table>


                    }
                    else
                    {
                        <p>Produkt kunde inte laddas.</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-5">
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Aktivitetsloggar för denna produkt</h3>
                    <input type="text" id="activityLogSearchInput" placeholder="Sök i aktivitetsloggar..." class="form-control mb-2" />

                    <table class="table table-striped" id="activityLogTable" data-sort-direction="asc">

                <thead>
    <tr>
        <th onclick="sortActivityLogTable(0)" style="cursor:pointer;">
            Namn
            <i class="bi bi-chevron-expand" id="activityLogSortIcon0"></i>
        </th>
        <th onclick="sortActivityLogTable(1)" style="cursor:pointer;">
            Anställningsnummer
            <i class="bi bi-chevron-expand" id="activityLogSortIcon1"></i>
        </th>
        <th onclick="sortActivityLogTable(2)" style="cursor:pointer;">
            Händelse
            <i class="bi bi-chevron-expand" id="activityLogSortIcon2"></i>
        </th>
        <th onclick="sortActivityLogTable(3)" style="cursor:pointer;">
            Datum
            <i class="bi bi-chevron-expand" id="activityLogSortIcon3"></i>
        </th>
    </tr>
</thead>

                        <tbody id="activityLogTableBody">
                            @if (Model.ActivityLogs.Any())
                            {
                                for (int i = 0; i < Model.ActivityLogs.Count; i++)
                                {
                                    var log = Model.ActivityLogs[i];
                                    <tr>
                                        <td>@Model.UserFullName[i]</td>
                                        <td>@Model.UserEmployeeNumbers[i]</td>
                                        <td>@log.Action</td>
                                        <td>@log.TimeStamp</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center">
                                        Inga aktivitetsloggar är tillgängliga för denna
                                        produkt.
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                <div class="d-flex justify-content-between align-items-center">
    <button id="activityLogPrevPage" class="btn btn-secondary">Föregående</button>
    <span id="activityLogPageNumber"></span>
    <button id="activityLogNextPage" class="btn btn-secondary">Nästa</button>
</div>

                    <a asp-page="/Log" asp-route-id="@Model.Product.Id" class="btn btn-info mt-3">
                        Visa fullständig historik
                    </a>


<div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProductModalLabel">Ändra produktinformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Stäng"></button>
            </div>
                                <div class="modal-body">
                                    <form method="post" asp-page-handler="UpdateProductInfo"
                                          onsubmit="return validateForm();">
                                        <input type="hidden" name="ProductId" value="@Model.Product.Id" />
                                        <div class="form-group mb-3">
                                            <label for="ProductName">Nytt namn</label>
                                            <input type="text" class="form-control" id="ProductName" name="ProductName"
                                                   value="@Model.Product.Name" required />
                                        </div>
                                        <div class="form-group mb-3">
                                            <label for="ProductDescription">Ny beskrivning</label>
                                            <textarea class="form-control" id="ProductDescription"
                                                      name="ProductDescription" required>@Model.Product.Description</textarea>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Spara ändringar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    @section Scripts {
                        <script>
                            function validateForm() {
                                const name = document.getElementById("ProductName").value;
                                const description = document.getElementById("ProductDescription").value;
                                if (!name || !description) {
                                    alert("Alla fält måste fyllas i!");
                                    return false;
                                }
                                return true;
                            }
                        </script>
                        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                      <script>
        // Variabler för aktivitetsloggstabellen
        const activityLogRowsPerPage = 5;
        let activityLogCurrentPage = 1;
        let activityLogOriginalRows = [];
        let activityLogFilteredRows = [];

        $(document).ready(function () {
            // Initialisera aktivitetsloggrows
            activityLogOriginalRows = Array.from(document.querySelectorAll("#activityLogTableBody tr"));
            activityLogFilteredRows = [...activityLogOriginalRows];

            paginateActivityLogTable();

            // Sökfunktion för aktivitetsloggar
            $("#activityLogSearchInput").on("keyup", function () {
                var value = $(this).val().toLowerCase();

                activityLogFilteredRows = activityLogOriginalRows.filter(row => {
                    return row.innerText.toLowerCase().includes(value);
                });

                activityLogCurrentPage = 1;
                paginateActivityLogTable();
            });

            // Paginering för aktivitetsloggstabellen
            $("#activityLogPrevPage").on("click", function () {
                if (activityLogCurrentPage > 1) {
                    activityLogCurrentPage--;
                    paginateActivityLogTable();
                }
            });

            $("#activityLogNextPage").on("click", function () {
                if (activityLogCurrentPage < Math.ceil(activityLogFilteredRows.length / activityLogRowsPerPage)) {
                    activityLogCurrentPage++;
                    paginateActivityLogTable();
                }
            });
        });

        function paginateActivityLogTable() {
            const start = (activityLogCurrentPage - 1) * activityLogRowsPerPage;
            const end = start + activityLogRowsPerPage;

            // Dölj alla rader först
            document.querySelectorAll("#activityLogTableBody tr").forEach(row => {
                row.style.display = "none";
            });

            // Visa endast raderna på den aktuella sidan
            activityLogFilteredRows.slice(start, end).forEach(row => {
                row.style.display = "";
            });

            const pageNumberElement = document.getElementById("activityLogPageNumber");
            pageNumberElement.innerText = `Sida ${activityLogCurrentPage} av ${Math.ceil(activityLogFilteredRows.length / activityLogRowsPerPage)}`;
        }

        // Sorteringsfunktion för aktivitetsloggstabellen
        function sortActivityLogTable(columnIndex) {
            const table = document.querySelector("#activityLogTable");
            const isAscending = table.getAttribute("data-sort-direction") === "asc";

            // Sortera raderna
            activityLogFilteredRows.sort((a, b) => {
                const cellA = a.cells[columnIndex].innerText.trim();
                const cellB = b.cells[columnIndex].innerText.trim();

                const isDate = !isNaN(Date.parse(cellA)) && !isNaN(Date.parse(cellB));
                const isNumber = !isNaN(parseFloat(cellA)) && !isNaN(parseFloat(cellB));

                let comparisonResult;
                if (isDate) {
                    comparisonResult = new Date(cellA) - new Date(cellB);
                } else if (isNumber) {
                    comparisonResult = parseFloat(cellA) - parseFloat(cellB);
                } else {
                    comparisonResult = cellA.localeCompare(cellB, 'sv-SE', { sensitivity: 'base' });
                }

                return isAscending ? comparisonResult : -comparisonResult;
            });

            // Växla sorteringsriktning
            table.setAttribute("data-sort-direction", isAscending ? "desc" : "asc");

            // Uppdatera sorteringsikoner
            for (let i = 0; i < 4; i++) {
                const icon = document.getElementById(`activityLogSortIcon${i}`);
                if (i === columnIndex) {
                    if (isAscending) {
                        icon.classList.remove('bi-chevron-expand');
                        icon.classList.add('bi-chevron-down');
                    } else {
                        icon.classList.remove('bi-chevron-down');
                        icon.classList.add('bi-chevron-up');
                    }
                } else {
                    icon.classList.remove('bi-chevron-down', 'bi-chevron-up');
                    icon.classList.add('bi-chevron-expand');
                }
            }

            // Återställ raderna i tabellen
            const tbody = document.querySelector("#activityLogTableBody");
            activityLogFilteredRows.forEach(row => tbody.appendChild(row));

            activityLogCurrentPage = 1;
            paginateActivityLogTable();
        }
    </script>
                    }
